/**
 * store
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
type AnyUpdater = (...args: any[]) => any;
type Listener<TState> = (next: TState, prev: TState) => void;
interface StoreOptions<TState, TUpdater extends AnyUpdater = (cb: TState) => TState> {
    updateFn?: (previous: TState) => (updater: TUpdater) => TState;
    onSubscribe?: (listener: Listener<TState>, store: Store<TState, TUpdater>) => () => void;
    onUpdate?: (next: TState, prev: TState) => void;
}
declare class Store<TState, TUpdater extends AnyUpdater = (cb: TState) => TState> {
    #private;
    listeners: Set<Listener<TState>>;
    state: TState;
    options?: StoreOptions<TState, TUpdater>;
    batching: boolean;
    queue: ((...args: any[]) => void)[];
    constructor(initialState: TState, options?: StoreOptions<TState, TUpdater>);
    subscribe: (listener: Listener<TState>) => () => void;
    setState: (updater: TUpdater) => void;
    batch: (cb: () => void) => void;
}
declare function shallow<T>(objA: T, objB: T): boolean;

export { AnyUpdater, Listener, Store, shallow };
