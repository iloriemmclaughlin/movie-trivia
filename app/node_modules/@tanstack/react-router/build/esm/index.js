/**
 * react-router
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
import * as React from 'react';
import { functionalUpdate, Router, warning, invariant, last } from '@tanstack/router';
export * from '@tanstack/router';
import { useStore } from '@tanstack/react-store';
export { useStore } from '@tanstack/react-store';

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

//

function lazy(importer) {
  const lazyComp = /*#__PURE__*/React.lazy(importer);
  const finalComp = lazyComp;
  finalComp.preload = async () => {
    {
      await importer();
    }
  };
  return finalComp;
}
//

function useLinkProps(options) {
  const router = useRouterContext();
  const {
    // custom props
    type,
    children,
    target,
    activeProps = () => ({
      className: 'active'
    }),
    inactiveProps = () => ({}),
    activeOptions,
    disabled,
    // fromCurrent,
    hash,
    search,
    params,
    to = '.',
    preload,
    preloadDelay,
    replace,
    // element props
    style,
    className,
    onClick,
    onFocus,
    onMouseEnter,
    onMouseLeave,
    onTouchStart,
    ...rest
  } = options;
  const linkInfo = router.buildLink(options);
  if (linkInfo.type === 'external') {
    const {
      href
    } = linkInfo;
    return {
      href
    };
  }
  const {
    handleClick,
    handleFocus,
    handleEnter,
    handleLeave,
    handleTouchStart,
    isActive,
    next
  } = linkInfo;
  const reactHandleClick = e => {
    if (React.startTransition) {
      // This is a hack for react < 18
      React.startTransition(() => {
        handleClick(e);
      });
    } else {
      handleClick(e);
    }
  };
  const composeHandlers = handlers => e => {
    if (e.persist) e.persist();
    handlers.filter(Boolean).forEach(handler => {
      if (e.defaultPrevented) return;
      handler(e);
    });
  };

  // Get the active props
  const resolvedActiveProps = isActive ? functionalUpdate(activeProps, {}) ?? {} : {};

  // Get the inactive props
  const resolvedInactiveProps = isActive ? {} : functionalUpdate(inactiveProps, {}) ?? {};
  return {
    ...resolvedActiveProps,
    ...resolvedInactiveProps,
    ...rest,
    href: disabled ? undefined : next.href,
    onClick: composeHandlers([onClick, reactHandleClick]),
    onFocus: composeHandlers([onFocus, handleFocus]),
    onMouseEnter: composeHandlers([onMouseEnter, handleEnter]),
    onMouseLeave: composeHandlers([onMouseLeave, handleLeave]),
    onTouchStart: composeHandlers([onTouchStart, handleTouchStart]),
    target,
    style: {
      ...style,
      ...resolvedActiveProps.style,
      ...resolvedInactiveProps.style
    },
    className: [className, resolvedActiveProps.className, resolvedInactiveProps.className].filter(Boolean).join(' ') || undefined,
    ...(disabled ? {
      role: 'link',
      'aria-disabled': true
    } : undefined),
    ['data-status']: isActive ? 'active' : undefined
  };
}
const Link = /*#__PURE__*/React.forwardRef((props, ref) => {
  const linkProps = useLinkProps(props);
  return /*#__PURE__*/React.createElement("a", _extends({
    ref: ref
  }, linkProps, {
    children: typeof props.children === 'function' ? props.children({
      isActive: linkProps['data-status'] === 'active'
    }) : props.children
  }));
});
function Navigate(props) {
  const router = useRouterContext();
  React.useLayoutEffect(() => {
    router.navigate(props);
  }, []);
  return null;
}
const matchesContext = /*#__PURE__*/React.createContext(null);
const routerContext = /*#__PURE__*/React.createContext(null);
class ReactRouter extends Router {
  constructor(opts) {
    super({
      ...opts,
      loadComponent: async component => {
        if (component.preload) {
          await component.preload();
        }
        return component;
      }
    });
  }
}
function RouterProvider({
  router,
  ...rest
}) {
  router.update(rest);
  const currentMatches = useStore(router.__store, s => s.currentMatches);
  React.useEffect(router.mount, [router]);
  return /*#__PURE__*/React.createElement(routerContext.Provider, {
    value: {
      router: router
    }
  }, /*#__PURE__*/React.createElement(matchesContext.Provider, {
    value: [undefined, ...currentMatches]
  }, /*#__PURE__*/React.createElement(CatchBoundary, {
    errorComponent: ErrorComponent,
    onCatch: () => {
      warning(false, `Error in router! Consider setting an 'errorComponent' in your RootRoute! üëç`);
    }
  }, /*#__PURE__*/React.createElement(Outlet, null))));
}
function useRouterContext() {
  const value = React.useContext(routerContext);
  warning(value, 'useRouter must be used inside a <Router> component!');
  useStore(value.router.__store);
  return value.router;
}
function useRouter(track, shallow) {
  const router = useRouterContext();
  useStore(router.__store, track, shallow);
  return router;
}
function useMatches() {
  return React.useContext(matchesContext);
}
function useMatch(opts) {
  const router = useRouterContext();
  const nearestMatch = useMatches()[0];
  const match = opts?.from ? router.state.currentMatches.find(d => d.route.id === opts?.from) : nearestMatch;
  invariant(match, `Could not find ${opts?.from ? `an active match from "${opts.from}"` : 'a nearest match!'}`);
  if (opts?.strict ?? true) {
    invariant(nearestMatch.route.id == match?.route.id, `useMatch("${match?.route.id}") is being called in a component that is meant to render the '${nearestMatch.route.id}' route. Did you mean to 'useMatch("${match?.route.id}", { strict: false })' or 'useRoute("${match?.route.id}")' instead?`);
  }
  useStore(match.__store, d => opts?.track?.(match) ?? match, opts?.shallow);
  return match;
}
function useRoute(routeId) {
  const router = useRouterContext();
  const resolvedRoute = router.getRoute(routeId);
  invariant(resolvedRoute, `Could not find a route for route "${routeId}"! Did you forget to add it to your route?`);
  return resolvedRoute;
}
function useSearch(opts) {
  const {
    track,
    ...matchOpts
  } = opts;
  const match = useMatch(matchOpts);
  useStore(match.__store, d => opts?.track?.(d.search) ?? d.search, true);
  return match.state.search;
}
function useParams(opts) {
  const router = useRouterContext();
  useStore(router.__store, d => {
    const params = last(d.currentMatches)?.params;
    return opts?.track?.(params) ?? params;
  }, true);
  return last(router.state.currentMatches)?.params;
}
function useNavigate(defaultOpts) {
  const router = useRouterContext();
  return React.useCallback(opts => {
    return router.navigate({
      ...defaultOpts,
      ...opts
    });
  }, []);
}
function useMatchRoute() {
  const router = useRouterContext();
  return React.useCallback(opts => {
    const {
      pending,
      caseSensitive,
      ...rest
    } = opts;
    return router.matchRoute(rest, {
      pending,
      caseSensitive
    });
  }, []);
}
function MatchRoute(props) {
  const matchRoute = useMatchRoute();
  const params = matchRoute(props);
  if (!params) {
    return null;
  }
  if (typeof props.children === 'function') {
    return props.children(params);
  }
  return params ? props.children : null;
}
function Outlet() {
  const matches = useMatches().slice(1);
  const match = matches[0];
  if (!match) {
    return null;
  }
  return /*#__PURE__*/React.createElement(SubOutlet, {
    matches: matches,
    match: match
  });
}
function SubOutlet({
  matches,
  match
}) {
  const router = useRouterContext();
  useStore(match.__store, store => [store.status, store.error], true);
  const defaultPending = React.useCallback(() => null, []);
  const PendingComponent = match.pendingComponent ?? router.options.defaultPendingComponent ?? defaultPending;
  const errorComponent = match.errorComponent ?? router.options.defaultErrorComponent;
  const ResolvedSuspenseBoundary = match.route.options.wrapInSuspense ?? true ? React.Suspense : SafeFragment;
  const ResolvedCatchBoundary = errorComponent ? CatchBoundary : SafeFragment;
  return /*#__PURE__*/React.createElement(matchesContext.Provider, {
    value: matches
  }, /*#__PURE__*/React.createElement(ResolvedSuspenseBoundary, {
    fallback: /*#__PURE__*/React.createElement(PendingComponent, null)
  }, /*#__PURE__*/React.createElement(ResolvedCatchBoundary, {
    key: match.route.id,
    errorComponent: errorComponent,
    onCatch: () => {
      warning(false, `Error in route match: ${match.id}`);
    }
  }, /*#__PURE__*/React.createElement(Inner, {
    match: match
  }))));
}
function Inner(props) {
  const router = useRouterContext();
  if (props.match.state.status === 'error') {
    throw props.match.state.error;
  }
  if (props.match.state.status === 'success') {
    return /*#__PURE__*/React.createElement(props.match.component ?? router.options.defaultComponent ?? Outlet);
  }
  if (props.match.state.status === 'pending') {
    throw props.match.__loadPromise;
  }
  invariant(false, 'Idle routeMatch status encountered during rendering! You should never see this. File an issue!');
}
function SafeFragment(props) {
  return /*#__PURE__*/React.createElement(React.Fragment, null, props.children);
}

// This is the messiest thing ever... I'm either seriously tired (likely) or
// there has to be a better way to reset error boundaries when the
// router's location key changes.

class CatchBoundary extends React.Component {
  state = {
    error: false,
    info: undefined
  };
  componentDidCatch(error, info) {
    this.props.onCatch(error, info);
    console.error(error);
    this.setState({
      error,
      info
    });
  }
  render() {
    return /*#__PURE__*/React.createElement(CatchBoundaryInner, _extends({}, this.props, {
      errorState: this.state,
      reset: () => this.setState({})
    }));
  }
}
function CatchBoundaryInner(props) {
  const [activeErrorState, setActiveErrorState] = React.useState(props.errorState);
  const router = useRouterContext();
  const errorComponent = props.errorComponent ?? ErrorComponent;
  const prevKeyRef = React.useRef('');
  React.useEffect(() => {
    if (activeErrorState) {
      if (router.state.currentLocation.key !== prevKeyRef.current) {
        setActiveErrorState({});
      }
    }
    prevKeyRef.current = router.state.currentLocation.key;
  }, [activeErrorState, router.state.currentLocation.key]);
  React.useEffect(() => {
    if (props.errorState.error) {
      setActiveErrorState(props.errorState);
    }
    // props.reset()
  }, [props.errorState.error]);
  if (props.errorState.error && activeErrorState.error) {
    return /*#__PURE__*/React.createElement(errorComponent, activeErrorState);
  }
  return props.children;
}
function ErrorComponent({
  error
}) {
  return /*#__PURE__*/React.createElement("div", {
    style: {
      padding: '.5rem',
      maxWidth: '100%'
    }
  }, /*#__PURE__*/React.createElement("strong", {
    style: {
      fontSize: '1.2rem'
    }
  }, "Something went wrong!"), /*#__PURE__*/React.createElement("div", {
    style: {
      height: '.5rem'
    }
  }), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("pre", {
    style: {
      fontSize: '.7em',
      border: '1px solid red',
      borderRadius: '.25rem',
      padding: '.5rem',
      color: 'red',
      overflow: 'auto'
    }
  }, error.message ? /*#__PURE__*/React.createElement("code", null, error.message) : null)));
}
function useBlocker(message, condition = true) {
  const router = useRouter();
  React.useEffect(() => {
    if (!condition) return;
    let unblock = router.history.block((retry, cancel) => {
      if (window.confirm(message)) {
        unblock();
        retry();
      } else {
        cancel();
      }
    });
    return unblock;
  });
}
function Block({
  message,
  condition,
  children
}) {
  useBlocker(message, condition);
  return children ?? null;
}

export { Block, ErrorComponent, Link, MatchRoute, Navigate, Outlet, ReactRouter, RouterProvider, lazy, matchesContext, routerContext, useBlocker, useLinkProps, useMatch, useMatchRoute, useMatches, useNavigate, useParams, useRoute, useRouter, useRouterContext, useSearch };
//# sourceMappingURL=index.js.map
